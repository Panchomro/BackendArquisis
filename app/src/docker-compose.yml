version: '3.4'

services:
  app:
    build:
      context: ./ # The path in the machine that have the files, in this case root
      dockerfile: ./Dockerfile # The name of the Dockerfile definition
    container_name: app
    #restart: unless-stopped
    networks:
      - app-network
      - worker
    depends_on:
      - db
      
    ports:
      - "3000:3000" # To expose the app to the machine localhost (machine-port:container:port)
    environment:
      DATABASE_USER: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      DATABASE_NAME: ${DB_NAME}
      DATABASE_PORT: ${DB_PORT}
      DATABASE_HOST: ${DB_HOST}
      PORT: ${PORT}
      BROKER_HOST: ${BROKER_HOST}
      BROKER_PORT: ${BROKER_PORT}
      BROKER_USER: ${BROKER_USER}
      BROKER_PASSWORD: ${BROKER_PASSWORD}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
    command: npm run start:app
  
  db:
    image: postgres # Cambia "nombre_imagen:tag" al nombre y etiqueta de tu imagen Docker
    container_name: db
    networks:
      - app-network
    volumes:
      - db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Mapea el puerto de la base de datos PostgreSQL
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      BROKER_HOST: ${BROKER_HOST}
      BROKER_PORT: ${BROKER_PORT}
      BROKER_USER: ${BROKER_USER}
      BROKER_PASSWORD: ${BROKER_PASSWORD}
    

  mqtt:
    image: mqtt
    build:
      context: ./ # The path in the machine that have the files, in this case root
      dockerfile: ./mqtt.Dockerfile # The name of the Dockerfile definition
    container_name: mqtt
    # restart: unless-stopped
    depends_on:
      - app
    networks:
      - app-network
    environment:
      BROKER_HOST: ${BROKER_HOST}
      BROKER_PORT: ${BROKER_PORT}
      BROKER_USER: ${BROKER_USER}
      BROKER_PASSWORD: ${BROKER_PASSWORD}
      DATABASE_USER: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      DATABASE_NAME: ${DB_NAME}
      DATABASE_PORT: ${DB_PORT}
      DATABASE_HOST: ${DB_HOST}
      PORT: ${PORT}

  producer:
    build: 
      context: ./workers/worker-service/producers
      dockerfile: Dockerfile
    networks:
      - worker
      - app-network
    environment:
      - PRODUCER_PORT=${PRODUCER_PORT}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - BACKEND_HOST=${BACKEND_HOST}
      - PORT=${PORT}

    ports:
      - "5000:5000"
    

  consumer:
    build: 
      context: ./workers/worker-service/consumers
      dockerfile: Dockerfile
    networks:
      - worker
      - app-network
    environment:
      - PRODUCER_PORT=${PRODUCER_PORT}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - BACKEND_HOST=${BACKEND_HOST}
      - PORT=${PORT}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    deploy:
      replicas: 2

  redis:
    image: redis
    container_name: redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - worker
      - app-network


  board:
    build: 
      context: ./workers/worker-service/board
      dockerfile: Dockerfile
    networks:
      - worker
      - app-network
    environment:
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - BACKEND_HOST= ${BACKEND_HOST}
      - PORT= ${PORT}
    ports:
      - 4000:4000

networks:
  app-network:
    driver: bridge
  worker:
    driver: bridge  

volumes:
  db-volume: