"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_transaction_1 = __importDefault(require("../common/base_transaction"));
var options_1 = __importDefault(require("../common/options"));
var _1 = __importDefault(require("."));
var requests_1 = require("./requests");
var request_service_1 = __importDefault(require("../common/request_service"));
var integration_commerce_codes_1 = __importDefault(require("../common/integration_commerce_codes"));
var integration_api_keys_1 = __importDefault(require("../common/integration_api_keys"));
var environment_1 = __importDefault(require("./common/environment"));
var Inscription = /** @class */ (function (_super) {
    __extends(Inscription, _super);
    /**
     * Constructor class Inscription PatpassComercio.
     * @param options (Optional) You can pass options to use a custom configuration.
     */
    function Inscription(options) {
        options = options || _1.default.getDefaultOptions() || new options_1.default(integration_commerce_codes_1.default.PATPASS_COMERCIO, integration_api_keys_1.default.PATPASS_COMERCIO, environment_1.default.Integration);
        return _super.call(this, options) || this;
    }
    /**
     * Starts a card inscription process
     * @param url URL to which Transbank will redirect after cardholder finish enrolling their card
     * @param name Client's name
     * @param lastName Client's lastName
     * @param secondLastName Client's second lastName
     * @param rut Commerce's Rut
     * @param serviceId Service Id
     * @param finalUrl URL to which Transbank will redirect after showing the receipt
     * @param maxAmount Max amount
     * @param phone Contact's phone
     * @param cellPhone Contact's cellphone
     * @param patpassName Patpass name
     * @param personEmail Contact's email
     * @param commerceEmail Commerce's email
     * @param address Contact's city
     * @param city Contact's city
     */
    Inscription.prototype.start = function (url, name, lastName, secondLastName, rut, serviceId, finalUrl, maxAmount, phone, cellPhone, patpassName, personEmail, commerceEmail, address, city) {
        var startRequest = new requests_1.StartRequest(url, name, lastName, secondLastName, rut, serviceId, finalUrl, this.options.commerceCode, maxAmount, phone, cellPhone, patpassName, personEmail, commerceEmail, address, city);
        return request_service_1.default.performPatpass(startRequest, this.options);
    };
    /**
     * This finalizes the card enrolling process
     * @param token Unique inscription identifier
     */
    Inscription.prototype.status = function (token) {
        return request_service_1.default.performPatpass(new requests_1.StatusRequest(token), this.options);
    };
    return Inscription;
}(base_transaction_1.default));
;
exports.default = Inscription;
