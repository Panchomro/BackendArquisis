import Options from '../../common/options';
import TransactionDetail from '../common/transaction_detail';
import BaseTransaction from '../../common/base_transaction';
declare class MallTransaction extends BaseTransaction {
    /**
     * Constructor class Webpay Plus transaction.
     * @param options (Optional) You can pass options to use a custom configuration.
     */
    constructor(options: Options);
    /**
     * Create a Webpay Plus Mall transaction.
     * @param buyOrder Commerce buy order, make sure this is unique.
     * @param sessionId You can use this field to pass session data if needed.
     * @param returnUrl URL to which Transbank will redirect after card holder pays
     * @param details Child transactions details, see {@link TransactionDetail} for more information.
     */
    create(buyOrder: string, sessionId: string, returnUrl: string, details: Array<TransactionDetail>): Promise<any>;
    /**
     * Commit a transaction, this should be invoked after the card holder pays
     * @param token Unique transaction identifier
     */
    commit(token: string): Promise<any>;
    /**
     * Obtain the status of a specific transaction
     * @param token Unique transaction identifier
     */
    status(token: string): Promise<any>;
    /**
     * Request a refund of a specific transaction, if you refund for the full amount and you're within
     * the time window the transaction will be reversed. If you're past that window or refund for less
     * than the total amount the transaction will be void.
     * @param token Unique transaction identifier
     * @param buyOrder Child buy order, used to identify the correct child transaction.
     * @param childCommerceCode Child commerce code, used to indetify the correct child transaction
     * @param amount Amount to be refunded
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    refund(token: string, buyOrder: string, childCommerceCode: string, amount: number): Promise<any>;
    /**
     * Capture a deferred transaction.
     * Your commerce code must be configured to support deferred capture.
     * @param childCommerceCode Child commerce code, used to indetify the correct child transaction
     * @param token Unique transaction identifier
     * @param buyOrder Child buy order, used to identify the correct child transaction.
     * @param authorizationCode Child transaction's authorization code
     * @param captureAmount Amount to be captured
     */
    capture(childCommerceCode: string, token: string, buyOrder: string, authorizationCode: string, captureAmount: number): Promise<any>;
}
export default MallTransaction;
