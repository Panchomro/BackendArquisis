"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CaptureRequest = void 0;
var api_constants_1 = __importDefault(require("../../../common/api_constants"));
var request_base_1 = __importDefault(require("../../../common/request_base"));
var CaptureRequest = /** @class */ (function (_super) {
    __extends(CaptureRequest, _super);
    function CaptureRequest(commercerCode, buyOrder, amount, authorizationCode) {
        var _this = _super.call(this, "".concat(api_constants_1.default.ONECLICK_ENDPOINT, "/transactions/capture"), 'PUT') || this;
        _this.commerceCode = commercerCode;
        _this.buyOrder = buyOrder;
        _this.amount = amount;
        _this.authorizationCode = authorizationCode;
        return _this;
    }
    CaptureRequest.prototype.toJson = function () {
        return JSON.stringify({
            commerce_code: this.commerceCode,
            buy_order: this.buyOrder,
            capture_amount: this.amount,
            authorization_code: this.authorizationCode,
        });
    };
    return CaptureRequest;
}(request_base_1.default));
exports.CaptureRequest = CaptureRequest;
