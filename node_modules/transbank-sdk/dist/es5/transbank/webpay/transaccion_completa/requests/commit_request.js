"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommitRequest = void 0;
var api_constants_1 = __importDefault(require("../../../common/api_constants"));
var request_base_1 = __importDefault(require("../../../common/request_base"));
var CommitRequest = /** @class */ (function (_super) {
    __extends(CommitRequest, _super);
    function CommitRequest(token, idQueryInstallments, deferredPeriodIndex, gracePeriod) {
        if (idQueryInstallments === void 0) { idQueryInstallments = undefined; }
        if (deferredPeriodIndex === void 0) { deferredPeriodIndex = undefined; }
        if (gracePeriod === void 0) { gracePeriod = undefined; }
        var _this = _super.call(this, "".concat(api_constants_1.default.WEBPAY_ENDPOINT, "/transactions/").concat(token), 'PUT') || this;
        _this.idQueryInstallments = idQueryInstallments;
        _this.deferredPeriodIndex = deferredPeriodIndex;
        _this.gracePeriod = gracePeriod;
        return _this;
    }
    CommitRequest.prototype.toJson = function () {
        return JSON.stringify({
            id_query_installments: this.idQueryInstallments,
            deferred_period_index: this.deferredPeriodIndex,
            grace_period: this.gracePeriod,
        });
    };
    return CommitRequest;
}(request_base_1.default));
exports.CommitRequest = CommitRequest;
